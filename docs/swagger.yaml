---
swagger: "2.0"
info:
  description: "API for an employee management system to determine employees that\
    \ are no longer working on active projects and to understand their qualifications\
    \ and expertise for suitability in other projects
    \n\n**Pagination**\n\n
      Requests that return multiple items will be paginated to 20 items by default. You can specify
      further pages with the `page` parameter. You can also set a custom page
      size up to 100 with the `perPage` parameter.
      \n\nPagination response data is included in http headers. By Default, the response header contains links with `next`, `last`, `first`, `prev` resource links.\n\n**Point to note** - the page attributes will have no effect if the data is fetched from db and not from es."
  version: "1.0.0"
  title: "UBahn API"
host: "ubahn-api-dev.herokuapp.com"
basePath: "/v5"
tags:
- name: "Users"
  description: "Users registered in the system"
- name: "Users Skills"
  description: "Skills of users"
- name: "Roles"
  description: "Roles registered in the system"
- name: "User Roles"
  description: "Roles of users"
- name: "External Profiles"
  description: "External profiles of users w.r.t an organization"
- name: "Achievements"
  description: "Achievements of users"
- name: "Achievements Provider"
  description: "Achievement providers registered in the system"
- name: "Organizations"
  description: "Organizations registered in the system"
- name: "Organizations Skills Provider"
  description: "Skill providers of Organizations"
- name: "User Attributes"
  description: "Attributes of users"
- name: "Attributes"
  description: "Attributes registered in the system"
- name: "Attribute Groups"
  description: "Attribute groups registered in the system"
- name: "Skill Search"
  description: "Search info registered in the system"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /users:
    get:
      tags:
      - "Users"
      description: "**Point to note** - For non-admin users, this endpoint will only\
        \ return entities that the user has created."
      operationId: "usersGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "handle"
        in: "query"
        description: "Filter by user handle"
        required: false
        type: "string"
      - name: "enrich"
        in: "query"
        description: "Enrich all child resources under the user"
        required: false
        type: "boolean"
      - name: "roleId"
        in: "query"
        description: "Filter by user roleId"
        required: false
        type: "string"
        format: "UUID"
      - name: "externalProfile.externalId"
        in: "query"
        description: "Filter by the user's external profile's external id"
        required: false
        type: "string"
        format: "UUID"
      - name: "externalProfile.organizationId"
        in: "query"
        description: "Filter by the user's organization id"
        required: false
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Users"
    head:
      tags:
      - "Users"
      description: "Retrieve header information for a search operation on users in\
        \ the application.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.\n"
      operationId: "usersHEAD"
      parameters:
      - name: "handle"
        in: "query"
        description: "Filter by user handle"
        required: false
        type: "string"
      - name: "enrich"
        in: "query"
        description: "Enrich all child resources under the user"
        required: false
        type: "boolean"
      - name: "skill[]"
        in: "query"
        type: "array"
        description: "The skill name to filter users with. Specify multiple times to provide multiple values"
        items:
          type: "string"
        collectionFormat: multi
      - name: "achievement[]"
        in: "query"
        type: "array"
        description: "The achievement name to filter users with. Specify multiple times to provide multiple values"
        items:
          type: "string"
        collectionFormat: multi
      - name: "location[]"
        in: "query"
        type: "array"
        description: "The location name to filter users with. Specify multiple times to provide multiple values. `location` here is an attribute of the user"
        items:
          type: "string"
        collectionFormat: multi
      - name: "isAvailable"
        in: "query"
        type: "boolean"
        description: "`true` corresponds to users that are available. `false` corresponds to users that are not available. `isAvailable` here is an attribute of the user"
        items:
          type: "string"
        collectionFormat: multi
      - name: "orderBy"
        in: "query"
        type: "string"
        description: "Sort order"
        enum: ["name", "location", "isAvailable"]
      - name: "roleId"
        in: "query"
        description: "Filter by user roleId"
        required: false
        type: "string"
        format: "UUID"
      - name: "userSkill.skillId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "userSkill.metricValue"
        in: "query"
        required: false
        type: "string"
      - name: "userSkill.certifierId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "userSkill.certifiedDate"
        in: "query"
        required: false
        type: "string"
      - name: "skill.skillProviderId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "skill.name"
        in: "query"
        required: false
        type: "string"
      - name: "skill.externalId"
        in: "query"
        required: false
        type: "string"
      - name: "skill.uri"
        in: "query"
        required: false
        type: "string"
      - name: "skillProvider.name"
        in: "query"
        required: false
        type: "string"
      - name: "userRole.roleId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "role.name"
        in: "query"
        required: false
        type: "string"
      - name: "externalProfile.organizationId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "externalProfile.uri"
        in: "query"
        required: false
        type: "string"
      - name: "organization.name"
        in: "query"
        required: false
        type: "string"
      - name: "achievement.achievementProviderId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "achievement.name"
        in: "query"
        required: false
        type: "string"
      - name: "achievement.uri"
        in: "query"
        required: false
        type: "string"
      - name: "achievement.certifierId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "achievement.certifiedDate"
        in: "query"
        required: false
        type: "string"
      - name: "achievementProvider.name"
        in: "query"
        required: false
        type: "string"
      - name: "userAttribute.attributeId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "userAttribute.value"
        in: "query"
        required: false
        type: "string"
      - name: "attribute.attributeGroupId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      - name: "attribute.name"
        in: "query"
        required: false
        type: "string"
      - name: "attributeGroup.name"
        in: "query"
        required: false
        type: "string"
      - name: "attributeGroup.organizationId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "Users"
      description: "Create a new User.\n\n**Security** - This endpoint is accessible\
        \ by all authenticated users.        \n"
      operationId: "usersPOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/User"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Users"
  /users/{userId}:
    get:
      tags:
      - "Users"
      description: "Get User with given id.\n\n**Security** - Note that for non-admin\
        \ users, this endpoint will only return entities that\nthe user has created.\
        \        \n"
      operationId: "usersUserIdGET"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "enrich"
        in: "query"
        description: "Enrich all child resources under the user"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/User"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Users"
    head:
      tags:
      - "Users"
      description: "Get User with given id, but only header information is returned.\n\
        \n**Security** - Note that for non-admin users, this endpoint will only return\
        \ entities that\nthe user has created.        \n"
      operationId: "usersUserIdHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "enrich"
        in: "query"
        description: "Enrich all child resources under the user"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "Users"
      description: "Remove an existing User with given id.\n\n**Security** - Note\
        \ that this endpoint is only available for admin users.  \n"
      operationId: "usersUserIdDELETE"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Users"
    patch:
      tags:
      - "Users"
      description: "Update an existing User with given id.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only allow updates on entities\
        \ that the\ncalling user has created.\n"
      operationId: "usersUserIdPATCH"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserUpdateRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/User"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Users"
  /users/{userId}/skills:
    get:
      tags:
      - "Users Skills"
      description: "Filter skills by its name given an user id.  If no results, then\
        \ empty array is returned.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.\n"
      operationId: "usersUserIdSkillsGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserSkill"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersSkills"
    head:
      tags:
      - "Users Skills"
      description: "Retrieve header information for a search operation on users skills\
        \ in the application.\n\n**Security** - Note that for non-admin users, this\
        \ endpoint will only return entities that\nthe user has created.\n"
      operationId: "usersUserIdSkillsHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersSkills"
    post:
      tags:
      - "Users Skills"
      description: "Create a new User Skill.\n\n**Security** - This endpoint is accessible\
        \ by all authenticated users.        \n"
      operationId: "usersUserIdSkillsPOST"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserSkillRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/UserSkill"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersSkills"
  /users/{userId}/skills/{skillId}:
    get:
      tags:
      - "Users Skills"
      description: "Get User Skills with given user and skill id.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only return entities\
        \ that\nthe user has created.        \n"
      operationId: "usersUserIdSkillsSkillIdGET"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "skillId"
        in: "path"
        description: "The skill id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/UserSkill"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersSkills"
    head:
      tags:
      - "Users Skills"
      description: "Get User Skills with given ids, but only header information is\
        \ returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "usersUserIdSkillsSkillIdHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "skillId"
        in: "path"
        description: "The skill id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersSkills"
    delete:
      tags:
      - "Users Skills"
      description: "Remove an existing User Skill with given ids.\n\n**Security**\
        \ - Note that this endpoint is only available for admin users.  \n"
      operationId: "usersUserIdSkillsSkillIdDELETE"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "skillId"
        in: "path"
        description: "The skill id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersSkills"
    patch:
      tags:
      - "Users Skills"
      description: "Update an existing skill with given ids.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only allow updates on entities\
        \ that the\ncalling user has created.\n"
      operationId: "usersUserIdSkillsSkillIdPATCH"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "skillId"
        in: "path"
        description: "The skill id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserSkillUpdateRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/UserSkill"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersSkills"
  /roles:
    get:
      tags:
      - "Roles"
      description: "Search Roles in the application.  If no results, then empty array\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.\n"
      operationId: "rolesGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "name"
        in: "query"
        description: "Filter by role name"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Roles"
    head:
      tags:
      - "Roles"
      description: "Retrieve header information for a search operation on Roles in\
        \ the application.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.\n"
      operationId: "rolesHEAD"
      parameters:
      - name: "name"
        in: "query"
        description: "Filter by role name"
        required: false
        type: "string"
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Roles"
    post:
      tags:
      - "Roles"
      description: "Create a new Role.\n\n**Security** - This endpoint is accessible\
        \ by all authenticated users.        \n"
      operationId: "rolesPOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NameRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Role"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Roles"
  /roles/{roleId}:
    get:
      tags:
      - "Roles"
      description: "Get role with given id.\n\n**Security** - Note that for non-admin\
        \ users, this endpoint will only return entities that\nthe user has created.\
        \        \n"
      operationId: "rolesRoleIdGET"
      parameters:
      - name: "roleId"
        in: "path"
        description: "The role id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Role"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Roles"
    head:
      tags:
      - "Roles"
      description: "Get role with given id, but only header information is returned.\n\
        \n**Security** - Note that for non-admin users, this endpoint will only return\
        \ entities that\nthe user has created.        \n"
      operationId: "rolesRoleIdHEAD"
      parameters:
      - name: "roleId"
        in: "path"
        description: "The role id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Roles"
    delete:
      tags:
      - "Roles"
      description: "Remove an existing role with given id.\n\n**Security** - Note\
        \ that this endpoint is only available for admin users.  \n"
      operationId: "rolesRoleIdDELETE"
      parameters:
      - name: "roleId"
        in: "path"
        description: "The role id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Roles"
    patch:
      tags:
      - "Roles"
      description: "Update an existing role with given id.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only allow updates on entities\
        \ that the\ncalling user has created.\n"
      operationId: "rolesRoleIdPATCH"
      parameters:
      - name: "roleId"
        in: "path"
        description: "The role id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NameRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Role"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Roles"
  /users/{userId}/roles:
    get:
      tags:
      - "User Roles"
      description: "Get User Roles that belong to given user id.\n\n**Security** -\
        \ Note that for non-admin users, this endpoint will only return entities that\n\
        the user has created.        \n"
      operationId: "usersUserIdRolesGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserRole"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserRoles"
    head:
      tags:
      - "User Roles"
      description: "Get User Roles that belong to given user id, but only header information\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "usersUserIdRolesHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserRoles"
    post:
      tags:
      - "User Roles"
      description: "Create a new User Role.\n\n**Security** - This endpoint is accessible\
        \ by all authenticated users.        \n"
      operationId: "usersUserIdRolesPOST"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserRoleRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/UserRole"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserRoles"
  /users/{userId}/roles/{roleId}:
    get:
      tags:
      - "User Roles"
      description: "Get role by its id.\n\n**Security** - Note that for non-admin\
        \ users, this endpoint will only return entities that\nthe user has created.\n"
      operationId: "usersUserIdRolesRoleIdGET"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "roleId"
        in: "path"
        description: "The role id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserRole"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserRoles"
    head:
      tags:
      - "User Roles"
      description: "Retrieve header information for a search operation on User Roles\
        \ in the application.\n\n**Security** - Note that for non-admin users, this\
        \ endpoint will only return entities that\nthe user has created.\n"
      operationId: "usersUserIdRolesRoleIdHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "roleId"
        in: "path"
        description: "The role id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "Success response"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserRoles"
    delete:
      tags:
      - "User Roles"
      description: "Remove an existing user role with given user and role id.\n\n\
        **Security** - Note that this endpoint is only available for admin users.\
        \  \n"
      operationId: "usersUserIdRolesRoleIdDELETE"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "roleId"
        in: "path"
        description: "The role id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserRoles"
  /users/{userId}/externalProfiles:
    get:
      tags:
      - "External Profiles"
      description: "Get External Profiles with given user id.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.        \n"
      operationId: "usersUserIdExternalProfilesGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "organizationName"
        in: "query"
        description: "The organization name"
        required: false
        type: "string"
      - name: "externalId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
        description: "The external id of the external profile."
      - name: "isInactive"
        in: "query"
        required: false
        type: "boolean"
        description: "If the external profile is inactive."
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExternalProfile"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "ExternalProfiles"
    head:
      tags:
      - "External Profiles"
      description: "Get External Profiles with given user id, but only header information\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "usersUserIdExternalProfilesHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "organizationName"
        in: "query"
        description: "The organization name"
        required: false
        type: "string"
      - name: "externalId"
        in: "query"
        required: false
        type: "string"
        format: "UUID"
        description: "The external id of the external profile."
      - name: "isInactive"
        in: "query"
        required: false
        type: "boolean"
        description: "If the external profile is inactive."
      responses:
        "200":
          description: "OK - the request was successful"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "ExternalProfiles"
    post:
      tags:
      - "External Profiles"
      description: "Create a new External Profile for given user id.\n\n**Security**\
        \ - This endpoint is accessible by all authenticated users.        \n"
      operationId: "usersUserIdExternalProfilesPOST"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ExternalProfileRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/ExternalProfile"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "ExternalProfiles"
  /users/{userId}/externalProfiles/{organizationId}:
    get:
      tags:
      - "External Profiles"
      description: "Get external profile with given user id and organization id.\n\
        \n**Security** - Note that for non-admin users, this endpoint will only return\
        \ entities that\nthe user has created.        \n"
      operationId: "usersUserIdExternalProfilesOrganizationIdGET"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/ExternalProfile"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "ExternalProfiles"
    head:
      tags:
      - "External Profiles"
      description: "Get external profile with given user id and organization id, but\
        \ only header information is returned.\n\n**Security** - Note that for non-admin\
        \ users, this endpoint will only return entities that\nthe user has created.\
        \        \n"
      operationId: "usersUserIdExternalProfilesOrganizationIdHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "ExternalProfiles"
    delete:
      tags:
      - "External Profiles"
      description: "Remove an existing external profile with given user id and organization\
        \ id.\n\n**Security** - Note that this endpoint is only available for admin\
        \ users.  \n"
      operationId: "usersUserIdExternalProfilesOrganizationIdDELETE"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "ExternalProfiles"
    patch:
      tags:
      - "External Profiles"
      description: "Update an existing external profile with given user id and organization\
        \ id.\n\n**Security** - Note that for non-admin users, this endpoint will\
        \ only allow updates on entities that the\ncalling user has created.\n"
      operationId: "usersUserIdExternalProfilesOrganizationIdPATCH"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ExternalProfileUpdateRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/ExternalProfile"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "ExternalProfiles"
  /users/{userId}/achievements:
    get:
      tags:
      - "Achievements"
      description: "Get Achievements for given user id.\n\n**Security** - Note that\
        \ for non-admin users, this endpoint will only return entities that\nthe user\
        \ has created.        \n"
      operationId: "usersUserIdAchievementsGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "achievementsproviderName"
        in: "query"
        description: "The achievement provider name"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Achievement"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Achievements"
    head:
      tags:
      - "Achievements"
      description: "Get Achievements for given user id, but only header information\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "usersUserIdAchievementsHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "achievementsproviderName"
        in: "query"
        description: "The achievement provider name"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Achievements"
    post:
      tags:
      - "Achievements"
      description: "Create a new Achievement.\n\n**Security** - This endpoint is accessible\
        \ by all authenticated users.        \n"
      operationId: "usersUserIdAchievementsPOST"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AchievementRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Achievement"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Achievements"
  /users/{userId}/achievements/{achievementsProviderId}:
    get:
      tags:
      - "Achievements"
      description: "Get Achievements for given user id and provider id.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only return entities\
        \ that\nthe user has created.\n"
      operationId: "usersUserIdAchievementsAchievementsProviderIdGET"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "achievementsProviderId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Achievement"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Achievements"
    head:
      tags:
      - "Achievements"
      description: "Get Achievements for given user id and provider id, but only header\
        \ information is returned.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.    \
        \    \n"
      operationId: "usersUserIdAchievementsAchievementsProviderIdHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "achievementsProviderId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Achievements"
    delete:
      tags:
      - "Achievements"
      description: "Remove an existing Achievement with given userId and achievement\
        \ providerId.\n\n**Security** - Note that this endpoint is only available\
        \ for admin users.  \n"
      operationId: "usersUserIdAchievementsAchievementsProviderIdDELETE"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "achievementsProviderId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Achievements"
    patch:
      tags:
      - "Achievements"
      description: "Update an existing Achievement with given userId and achievement\
        \ providerId.  Only the fields in the request body are updated.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only allow updates on\
        \ entities that the\ncalling user has created.\n"
      operationId: "usersUserIdAchievementsAchievementsProviderIdPATCH"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "achievementsProviderId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AchievementUpdateRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Achievement"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Achievements"
  /achievementsProviders:
    get:
      tags:
      - "Achievements Provider"
      description: "Search Achievements Provider in the application.  If no results,\
        \ then empty array is returned.\n\n**Security** - Note that for non-admin\
        \ users, this endpoint will only return entities that\nthe user has created.\n"
      operationId: "achievementsProvidersGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "name"
        in: "query"
        description: "Filter by provider name"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AchievementsProvider"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AchievementsProvider"
    head:
      tags:
      - "Achievements Provider"
      description: "Retrieve header information for a search operation on achivements\
        \ provider in the application.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.\n"
      operationId: "achievementsProvidersHEAD"
      parameters:
      - name: "name"
        in: "query"
        description: "Filter by provider name"
        required: false
        type: "string"
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AchievementsProvider"
    post:
      tags:
      - "Achievements Provider"
      description: "Create a new Achievements Provider.\n\n**Security** - This endpoint\
        \ is accessible by all authenticated users.        \n"
      operationId: "achievementsProvidersPOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NameRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/AchievementsProvider"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AchievementsProvider"
  /achievementsProviders/{providerId}:
    get:
      tags:
      - "Achievements Provider"
      description: "Get achievements provider with given id.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.        \n"
      operationId: "achievementsProvidersProviderIdGET"
      parameters:
      - name: "providerId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/AchievementsProvider"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AchievementsProvider"
    head:
      tags:
      - "Achievements Provider"
      description: "Get achivements provider with given id, but only header information\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "achievementsProvidersProviderIdHEAD"
      parameters:
      - name: "providerId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AchievementsProvider"
    delete:
      tags:
      - "Achievements Provider"
      description: "Remove an existing achiements provider with given id.\n\n**Security**\
        \ - Note that this endpoint is only available for admin users.  \n"
      operationId: "achievementsProvidersProviderIdDELETE"
      parameters:
      - name: "providerId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AchievementsProvider"
    patch:
      tags:
      - "Achievements Provider"
      description: "Update an existing achivements provider with given id.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only allow updates on\
        \ entities that the\ncalling user has created.\n"
      operationId: "achievementsProvidersProviderIdPATCH"
      parameters:
      - name: "providerId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NameRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/AchievementsProvider"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AchievementsProvider"
  /organizations:
    get:
      tags:
      - "Organizations"
      description: "Search organizations in the application.  If no results, then\
        \ empty array is returned.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.\n"
      operationId: "organizationsGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "name"
        in: "query"
        description: "Filter by organization name"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organization"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Organizations"
    head:
      tags:
      - "Organizations"
      description: "Retrieve header information for a search operation on organizations\
        \ in the application.\n\n**Security** - Note that for non-admin users, this\
        \ endpoint will only return entities that\nthe user has created.\n"
      operationId: "organizationsHEAD"
      parameters:
      - name: "name"
        in: "query"
        description: "Filter by organization name"
        required: false
        type: "string"
      responses:
        "200":
          description: "success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Organizations"
    post:
      tags:
      - "Organizations"
      description: "Create a new Organization.\n\n**Security** - This endpoint is\
        \ accessible by all authenticated users.        \n"
      operationId: "organizationsPOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NameRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Organization"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Organizations"
  /organizations/{organizationId}:
    get:
      tags:
      - "Organizations"
      description: "Get organization with given id.\n\n**Security** - Note that for\
        \ non-admin users, this endpoint will only return entities that\nthe user\
        \ has created.        \n"
      operationId: "organizationsOrganizationIdGET"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Organization"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Organizations"
    head:
      tags:
      - "Organizations"
      description: "Get organization with given id, but only header information is\
        \ returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "organizationsOrganizationIdHEAD"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Organizations"
    delete:
      tags:
      - "Organizations"
      description: "Remove an existing organization with given id.\n\n**Security**\
        \ - Note that this endpoint is only available for admin users.  \n"
      operationId: "organizationsOrganizationIdDELETE"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Organizations"
    patch:
      tags:
      - "Organizations"
      description: "Update an existing organization with given id.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only allow updates on\
        \ entities that the\ncalling user has created.\n"
      operationId: "organizationsOrganizationIdPATCH"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NameRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Organization"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Organizations"
  /organizations/{organizationId}/skillProviders:
    get:
      tags:
      - "Organizations Skills Provider"
      description: "Search Organizations Skills Provider in the application.  If no results, then\
        \ empty array is returned.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.\n"
      operationId: "organizationsOrganizationIdSkillProvidersGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrganizationSkillsProvider"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "OrganizationSkillsProvider"
    head:
      tags:
      - "Organizations Skills Provider"
      description: "Retrieve header information for a search operation on organizations skills providers\
        \ in the application.\n\n**Security** - Note that for non-admin users, this\
        \ endpoint will only return entities that\nthe user has created.\n"
      operationId: "organizationsOrganizationIdSkillProvidersHEAD"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "OrganizationSkillsProvider"
    post:
      tags:
      - "Organizations Skills Provider"
      description: "Create a new Organization Skills Provider.\n\n**Security** - This endpoint\
        \ is accessible by all authenticated users.        \n"
      operationId: "organizationsOrganizationIdSkillProvidersPOST"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/OrganizationSkillsProviderRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/OrganizationSkillsProvider"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "OrganizationSkillsProvider"
  /organizations/{organizationId}/skillProviders/{skillProviderId}:
    get:
      tags:
      - "Organizations Skills Provider"
      description: "Get organization skills provider with given id.\n\n**Security** - Note that\
        \ for non-admin users, this endpoint will only return entities that\nthe user\
        \ has created.        \n"
      operationId: "organizationsOrganizationIdSkillProvidersSkillProviderIdGET"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      - name: "skillProviderId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/OrganizationSkillsProvider"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "OrganizationSkillsProvider"
    head:
      tags:
      - "Organizations Skills Provider"
      description: "Get organization skills provider with given id, but only header information\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "organizationsOrganizationIdSkillProvidersSkillProviderIdHEAD"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      - name: "skillProviderId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "OrganizationSkillsProvider"
    delete:
      tags:
      - "Organizations Skills Provider"
      description: "Remove an existing organization skills provider with given id.\n\n**Security**\
        \ - Note that this endpoint is only available for admin users.  \n"
      operationId: "organizationsOrganizationIdSkillProvidersSkillProviderIdDELETE"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "The organization id"
        required: true
        type: "string"
        format: "UUID"
      - name: "skillProviderId"
        in: "path"
        description: "The provider id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "OrganizationSkillsProvider"
  /users/{userId}/attributes:
    get:
      tags:
      - "User Attributes"
      description: "Get attributes for the given user.\nOptionally, filter attributes\
        \ by the attribute name, attribute group name and attribute group id, given\
        \ an user id.  If no results, then empty array is returned.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only return entities\
        \ that\nthe user has created.\n"
      operationId: "usersUserIdAttributesGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "attributeName"
        in: "query"
        description: "Filter by the attribute name"
        required: false
        type: "string"
      - name: "attributeGroupName"
        in: "query"
        description: "Filter by the attribute group name"
        required: false
        type: "string"
      - name: "attributeGroupId"
        in: "query"
        description: "Filter by the attribute group id"
        required: false
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserAttribute"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserAttributes"
    head:
      tags:
      - "User Attributes"
      description: "Retrieve header information for a search operation on user attributes\
        \ in the application.\n\n**Security** - Note that for non-admin users, this\
        \ endpoint will only return entities that\nthe user has created.\n"
      operationId: "usersUserIdAttributesHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "attributeName"
        in: "query"
        description: "Filter by the attribute name"
        required: false
        type: "string"
      - name: "attributeGroupName"
        in: "query"
        description: "Filter by the attribute group name"
        required: false
        type: "string"
      - name: "attributeGroupId"
        in: "query"
        description: "Filter by the attribute group id"
        required: false
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserAttributes"
    post:
      tags:
      - "User Attributes"
      description: "Create a new User Attribute.\n\n**Security** - This endpoint is\
        \ accessible by all authenticated users.        \n"
      operationId: "usersUserIdAttributesPOST"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserAttributeRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/UserAttribute"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserAttributes"
  /users/{userId}/attributes/{attributeId}:
    get:
      tags:
      - "User Attributes"
      description: "Get User Attributes with given user and attribute id.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only return entities\
        \ that\nthe user has created.        \n"
      operationId: "usersUserIdAttributesAttributeIdGET"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/UserAttribute"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserAttributes"
    head:
      tags:
      - "User Attributes"
      description: "Get User Attributes with given ids, but only header information\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.        \n"
      operationId: "usersUserIdAttributesAttributeIdHEAD"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserAttributes"
    delete:
      tags:
      - "User Attributes"
      description: "Remove an existing User Attribute with given ids.\n\n**Security**\
        \ - Note that this endpoint is only available for admin users.  \n"
      operationId: "usersUserIdAttributesAttributeIdDELETE"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserAttributes"
    patch:
      tags:
      - "User Attributes"
      description: "Update an existing user attribute with given ids.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only allow updates on\
        \ entities that the\ncalling user has created.\n"
      operationId: "usersUserIdAttributesAttributeIdPATCH"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
        format: "UUID"
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserAttributeUpdateRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/UserAttribute"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "UserAttributes"
  /attributes:
    get:
      tags:
      - "Attributes"
      description: "Get list of attributes in the application.  If no results, then\
        \ empty array is returned.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.\n"
      operationId: "attributesGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "attributeGroupId"
        in: "query"
        description: "Filter by attribute group id"
        required: false
        type: "string"
        format: "UUID"
      - name: "name"
        in: "query"
        description: "Filter by attribute name"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Attribute"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Attributes"
    head:
      tags:
      - "Attributes"
      description: "Retrieve header information for get operation on Attributes in\
        \ the application.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.\n"
      operationId: "attributesHEAD"
      parameters: []
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Attributes"
    post:
      tags:
      - "Attributes"
      description: "Create a new Attribute.\n\n**Security** - This endpoint is accessible\
        \ by all authenticated users.        \n"
      operationId: "attributesPOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AttributeRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Attribute"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Attributes"
  /attributes/{attributeId}:
    get:
      tags:
      - "Attributes"
      description: "Get Attribute by given attribute id.\n\n**Security** - Note that\
        \ for non-admin users, this endpoint will only return entities that\nthe user\
        \ has created.        \n"
      operationId: "attributesAttributeIdGET"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Attribute"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Attributes"
    head:
      tags:
      - "Attributes"
      description: "Retrieve header information for get operation on Attribute by\
        \ its id in the application.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.    \
        \   \n"
      operationId: "attributesAttributeIdHEAD"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Attributes"
    delete:
      tags:
      - "Attributes"
      description: "Remove an existing attribute with given id.\n\n**Security** -\
        \ Note that this endpoint is only available for admin users.  \n"
      operationId: "attributesAttributeIdDELETE"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Attributes"
    patch:
      tags:
      - "Attributes"
      description: "Update an existing attribute with given id.\n\n**Security** -\
        \ Note that for non-admin users, this endpoint will only allow updates on\
        \ entities that the\ncalling user has created.\n"
      operationId: "attributesAttributeIdPATCH"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "The attribute id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AttributeUpdateRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/Attribute"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Attributes"
  /attributeGroups:
    get:
      tags:
      - "Attribute Groups"
      description: "Search Attribute Groups in the application.  Multiple filters\
        \ are supported.\nIf no results, then empty array is returned.\n\n**Security**\
        \ - Note that for non-admin users, this endpoint will only return entities\
        \ that\nthe user has created.\n"
      operationId: "attributeGroupsGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "name"
        in: "query"
        description: "Filter by group name"
        required: false
        type: "string"
      - name: "organizationId"
        in: "query"
        description: "Filter by organization id"
        required: false
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AttributeGroup"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AttributeGroups"
    head:
      tags:
      - "Attribute Groups"
      description: "Retrieve header information for a search operation on Attribute\
        \ Groups in the application.\n\n**Security** - Note that for non-admin users,\
        \ this endpoint will only return entities that\nthe user has created.\n"
      operationId: "attributeGroupsHEAD"
      parameters:
      - name: "name"
        in: "query"
        description: "Filter by group name"
        required: false
        type: "string"
      - name: "organizationId"
        in: "query"
        description: "Filter by organization id"
        required: false
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "Success response"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AttributeGroups"
    post:
      tags:
      - "Attribute Groups"
      description: "Create a new Attribute Group.\n\n**Security** - This endpoint\
        \ is accessible by all authenticated users.        \n"
      operationId: "attributeGroupsPOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AttributeGroupRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/AttributeGroup"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AttributeGroups"
  /attributeGroups/{id}:
    get:
      tags:
      - "Attribute Groups"
      description: "Get Attribute Groups with given id.\n\n**Security** - Note that\
        \ for non-admin users, this endpoint will only return entities that\nthe user\
        \ has created.        \n"
      operationId: "attributeGroupsIdGET"
      parameters:
      - name: "id"
        in: "path"
        description: "The id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/AttributeGroup"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AttributeGroups"
    head:
      tags:
      - "Attribute Groups"
      description: "Get Attribute Group with given id, but only header information\
        \ is returned.\n\n**Security** - Note that for non-admin users, this endpoint\
        \ will only return entities that\nthe user has created.\n"
      operationId: "attributeGroupsIdHEAD"
      parameters:
      - name: "id"
        in: "path"
        description: "The id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AttributeGroups"
    delete:
      tags:
      - "Attribute Groups"
      description: "Remove an existing Attribute Group with given id.\n\n**Security**\
        \ - Note that this endpoint is only available for admin users.  \n"
      operationId: "attributeGroupsIdDELETE"
      parameters:
      - name: "id"
        in: "path"
        description: "The id"
        required: true
        type: "string"
        format: "UUID"
      responses:
        "204":
          description: "OK - the request was successful"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AttributeGroups"
    patch:
      tags:
      - "Attribute Groups"
      description: "Update an existing Attribute Group with given id.  Only the fields\
        \ in the request body are updated.\n\n**Security** - Note that for non-admin\
        \ users, this endpoint will only allow updates on entities that the\ncalling\
        \ user has created.\n"
      operationId: "attributeGroupsIdPATCH"
      parameters:
      - name: "id"
        in: "path"
        description: "The id"
        required: true
        type: "string"
        format: "UUID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AttributeGroupRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            $ref: "#/definitions/AttributeGroup"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "404":
          $ref: "#/definitions/NotFound"
        "409":
          $ref: "#/definitions/Conflict"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "AttributeGroups"
  /skill-search/users:
    post:
      tags:
      - "Skill Search"
      description: "Search for users in the application.  If no results, then empty\
        \ array is returned.  Multiple filters are\nsupported.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.\n"
      operationId: "searchUsersGET"
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/perPage'
      - name: "orderBy"
        in: "query"
        description: "Sort order"
        enum: ["name", "location", "isAvailable"]
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SearchUserRequestBody"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EnhancedUser"
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Search"
  /skill-search/userAttributes:
    get:
      tags:
      - "Skill Search"
      description: "Search for user attributes in the application.  If no results, then empty\
        \ array is returned.  Multiple filters are\nsupported.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.\n"
      operationId: "searchUserAttributesGET"
      parameters:
      - name: "attributeId"
        in: "query"
        description: "The attribute id"
        type: "string"
        format: "UUID"
      - name: "attributeValue"
        in: "query"
        description: "The attribute value"
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LookupAttribute"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Search"
    head:
      tags:
      - "Skill Search"
      description: "Retrieve header information for a search operation on user attributes in the application.  Multiple filters are supported.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.\n"
      operationId: "searchUserAttributesHEAD"
      parameters:
      - name: "attributeId"
        in: "query"
        description: "The attribute id"
        type: "string"
        format: "UUID"
      - name: "attributeValue"
        in: "query"
        description: "The attribute value"
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Search"
  /skill-search/userAchievements:
    get:
      tags:
      - "Skill Search"
      description: "Search for user achievements in the application.  If no results, then empty\
        \ array is returned.  Multiple filters are\nsupported.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.\n"
      operationId: "searchUserAchievementsGET"
      parameters:
      - name: "organizationId"
        in: "query"
        description: "The organization id"
        type: "string"
        format: "UUID"
        required: true
      - name: "keyword"
        in: "query"
        description: "The query keyword"
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LookupAchievement"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Search"
    head:
      tags:
      - "Skill Search"
      description: "Retrieve header information for a search operation on user achievements in the application. Multiple filters are\nsupported.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.\n"
      operationId: "searchUserAchievementsHEAD"
      parameters:
      - name: "organizationId"
        in: "query"
        description: "The organization id"
        type: "string"
        format: "UUID"
        required: true
      - name: "keyword"
        in: "query"
        description: "The query keyword"
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Search"
  /skill-search/skills:
    get:
      tags:
      - "Skill Search"
      description: "Search for skills associated with an org in the application.  If no results, then empty\
        \ array is returned.  Multiple filters are\nsupported.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.\n"
      operationId: "searchSkillsGET"
      parameters:
      - name: "organizationId"
        in: "query"
        description: "The organization id"
        type: "string"
        format: "UUID"
        required: true
      - name: "keyword"
        in: "query"
        description: "The query keyword"
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LookupSkill"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Search"
    head:
      tags:
      - "Skill Search"
      description: "Retrieve header information for a search operation on skills associated with an org in the application.  Multiple filters are\nsupported.\n\n**Security** - Note\
        \ that for non-admin users, this endpoint will only return entities that\n\
        the user has created.\n"
      operationId: "searchSkillsHEAD"
      parameters:
      - name: "organizationId"
        in: "query"
        description: "The organization id"
        type: "string"
        format: "UUID"
        required: true
      - name: "keyword"
        in: "query"
        description: "The query keyword"
        type: "string"
      responses:
        "200":
          description: "OK - the request was successful"
        "400":
          $ref: "#/definitions/BadRequest"
        "401":
          $ref: "#/definitions/Unauthorized"
        "403":
          $ref: "#/definitions/Forbidden"
        "500":
          $ref: "#/definitions/ServerError"
      security:
      - Bearer: []
      x-swagger-router-controller: "Search"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"

parameters:
  page:
    name: page
    in: query
    description: The page number.
    required: false
    type: integer
    default: 1
  perPage:
    name: perPage
    in: query
    description: The number of items to list per page.
    required: false
    type: integer
    default: 20
    maximum: 100

definitions:
  AuditFields:
    type: "object"
    required:
    - "created"
    - "createdBy"
    - "updated"
    - "updatedBy"
    properties:
      created:
        type: "string"
        format: "date-time"
        description: "When the entity was created."
      updated:
        type: "string"
        format: "date-time"
        description: "When the entity was updated."
      createdBy:
        type: "string"
        format: "UUID"
        description: "Creator of the entity."
      updatedBy:
        type: "string"
        format: "UUID"
        description: "User that last updated the entity."
    description: "Describes the audit fields that are present in all the models in\
      \ this API."
  Achievement:
    allOf:
    - type: "object"
      required:
      - "achievementsProviderId"
      - "certifierId"
      - "name"
      - "uri"
      - "userId"
      properties:
        userId:
          type: "string"
          format: "UUID"
          description: "The id of user that this Achievement belongs to."
        achievementsProviderId:
          type: "string"
          format: "UUID"
          description: "The id of achievements provider for this Achievement."
        name:
          type: "string"
          description: "Name of achievement."
        uri:
          type: "string"
          description: "Uri of achievement"
        certifierId:
          type: "string"
          description: "Id of certifier"
        certifiedDate:
          type: "string"
          format: "date-time"
          description: "The date when certification occurred."
    - $ref: "#/definitions/AuditFields"
  LookupAchievement:
    allOf:
    - type: "object"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The id of the user achievement."
        name:
          type: "string"
          description: "Name of achievement."
  AchievementRequestBody:
    allOf:
    - type: "object"
      properties:
        achievementsProviderId:
          type: "string"
          format: "UUID"
          description: "The id of provider for this Achievement."
      example:
        achievementsProviderId: "string"
    - $ref: "#/definitions/AchievementUpdateRequestBody"
  AchievementUpdateRequestBody:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of Achievement"
      uri:
        type: "string"
        description: "Uri of Achievement"
      certifierId:
        type: "string"
        description: "Id of certifier"
      certifiedDate:
        type: "string"
        format: "date-time"
        description: "The date when certification occurred."
    example:
      certifierId: "certifierId"
      certifiedDate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      uri: "uri"
  AchievementsProvider:
    allOf:
    - type: "object"
      required:
      - "id"
      - "name"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The id of the provider."
        name:
          type: "string"
          description: "The name of the provider."
    - $ref: "#/definitions/AuditFields"
  LookupSkill:
    allOf:
    - type: "object"
      properties:
        skillId:
          type: "string"
          format: "UUID"
          description: "The skill id"
        skillProviderId:
          type: "string"
          format: "UUID"
          description: "The referenced skill provider id"
        name:
          type: "string"
          description: "The name of the skill"
  ExternalProfile:
    allOf:
    - type: "object"
      required:
      - "organizationId"
      - "userId"
      - "externalId"
      properties:
        userId:
          type: "string"
          format: "UUID"
          description: "The id of the user this profile belongs to."
        organizationId:
          type: "string"
          format: "UUID"
          description: "The id of the organization this profile belongs to."
        uri:
          type: "string"
          description: "The uri of the external profile."
        externalId:
          type: "string"
          format: "UUID"
          description: "The external id of the external profile."
        isInactive:
          type: "boolean"
          description: "If the external profile is inactive."
    - $ref: "#/definitions/AuditFields"
  ExternalProfileRequestBody:
    type: "object"
    required:
    - "organizationId"
    - "externalId"
    properties:
      organizationId:
        type: "string"
        format: "UUID"
        description: "The id of the organization this profile belongs to."
      uri:
        type: "string"
        description: "The uri of the external profile."
      externalId:
        type: "string"
        format: "UUID"
        description: "The external id of the external profile."
      isInactive:
        type: "boolean"
        description: "If the external profile is inactive."
    example:
      organizationId: "organizationId"
      uri: "uri"
      externalId: "externalId"
      isInactive: false
  ExternalProfileUpdateRequestBody:
    type: "object"
    required:
    - "organizationId"
    properties:
      organizationId:
        type: "string"
        format: "UUID"
        description: "The id of the organization this profile belongs to."
      uri:
        type: "string"
        description: "The uri of the external profile."
      externalId:
        type: "string"
        format: "UUID"
        description: "The external id of the external profile."
      isInactive:
        type: "boolean"
        description: "If the external profile is inactive."
    example:
      organizationId: "organizationId"
      userId: "userId"
      uri: "uri"
      externalId: "externalId"
      isInactive: false
  Role:
    allOf:
    - type: "object"
      required:
      - "id"
      - "name"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The id of the role."
        name:
          type: "string"
          description: "The name of the role."
    - $ref: "#/definitions/AuditFields"
  UserRole:
    allOf:
    - type: "object"
      required:
      - "userId"
      properties:
        userId:
          type: "string"
          format: "UUID"
          description: "The user to be associated with the role"
    - $ref: "#/definitions/UserRoleRequestBody"
    - $ref: "#/definitions/AuditFields"
  UserRoleRequestBody:
    type: "object"
    required:
    - "roleId"
    properties:
      roleId:
        type: "string"
        format: "UUID"
        description: "The roleId of this user role."
    description: "Represents a Role that belongs to a given user.\n"
    example:
      roleId: "roleId"
  User:
    allOf:
    - type: "object"
      required:
      - "handle"
      - "firstName"
      - "lastName"
      - "id"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The id of the user."
        handle:
          type: "string"
          description: "The handle of the user."
        firstName:
          type: "string"
          description: "The first name of the user."
        lastName:
          type: "string"
          description: "The last name of the user."
    - $ref: "#/definitions/AuditFields"
  EnhancedUser:
    allOf:
    - type: "object"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The id of the user."
        handle:
          type: "string"
          description: "The handle of the user."
        firstName:
          type: "string"
          description: "The first name of the user."
        lastName:
          type: "string"
          description: "The last name of the user."
        skills:
          type: "array"
          items:
            type: "object"
          description: "Array of skill objects"
        achievements:
          type: "array"
          items:
            type: "object"
          description: "Array of achievement objects"
        groups:
          type: "array"
          items:
            type: "object"
          description: "Array of group objects"
        externalProfiles:
          type: "array"
          items:
            type: "object"
          description: "Array of external profile objects"
        attributes:
          type: "array"
          items:
            type: "object"
          description: "Array of attribute objects"
    - $ref: "#/definitions/AuditFields"
  UserSkill:
    allOf:
    - type: "object"
      required:
      - "certifiedDate"
      - "certifierId"
      - "metricValue"
      - "skillId"
      - "userId"
      properties:
        userId:
          type: "string"
          format: "UUID"
          description: "The id of user that this Skill belongs to."
        skillId:
          type: "string"
          format: "UUID"
          description: "The Skill id."
        metricValue:
          type: "string"
          description: "The skill metric value."
        certifierId:
          type: "string"
          description: "Id of certifier"
        certifiedDate:
          type: "string"
          format: "date-time"
          description: "The date when certification occurred."
    - $ref: "#/definitions/AuditFields"
  UserSkillRequestBody:
    allOf:
    - type: "object"
      properties:
        skillId:
          type: "string"
          format: "UUID"
          description: "The Skill id."
      example:
        certifierId: "certifierId"
        certifiedDate: "2000-01-23T04:56:07.000+00:00"
        metricValue: "metricValue"
        skillId: "string"
    - $ref: "#/definitions/UserSkillUpdateRequestBody"
  UserSkillUpdateRequestBody:
    type: "object"
    properties:
      metricValue:
        type: "string"
        description: "The skill metric value."
      certifierId:
        type: "string"
        description: "Id of certifier"
      certifiedDate:
        type: "string"
        format: "date-time"
        description: "The date when certification occurred."
    example:
      certifierId: "certifierId"
      certifiedDate: "2000-01-23T04:56:07.000+00:00"
      metricValue: "metricValue"
  UserAttribute:
    allOf:
    - type: "object"
      required:
      - "attributeId"
      - "userId"
      - "value"
      properties:
        userId:
          type: "string"
          format: "UUID"
          description: "The id of user that this user attribute belongs to."
        attributeId:
          type: "string"
          format: "UUID"
          description: "The attribute id."
        value:
          type: "string"
          description: "The user attribute value."
    - $ref: "#/definitions/AuditFields"
  LookupAttribute:
    allOf:
    - type: "object"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The id of the user attribute."
        attributeId:
          type: "string"
          format: "UUID"
          description: "The attribute id."
        value:
          type: "string"
          description: "The user attribute value."
  UserAttributeRequestBody:
    allOf:
    - type: "object"
      properties:
        attributeId:
          type: "string"
          format: "UUID"
          description: "The attribute id."
      example:
        attributeId: "string"
    - $ref: "#/definitions/UserAttributeUpdateRequestBody"
  UserAttributeUpdateRequestBody:
    type: "object"
    properties:
      value:
        type: "string"
        description: "The user attribute value."
    example:
      value: "value"
  UserRequestBody:
    type: "object"
    properties:
      handle:
        type: "string"
        description: "The handle of the user."
      firstName:
        type: "string"
        description: "The first name of the user."
      lastName:
        type: "string"
        description: "The last name of the user."
    description: "Properties that are provided when creating or editing a User.\n"
    example:
      handle: "handle"
      firstName: "John"
      lastName: "Doe"
  UserUpdateRequestBody:
    type: "object"
    properties:
      handle:
        type: "string"
        description: "The handle of the user."
      firstName:
        type: "string"
        description: "The first name of the user."
      lastName:
        type: "string"
        description: "The last name of the user."
    example:
      handle: "handle"
      firstName: "John"
      lastName: "Doe"
  AttributeGroup:
    allOf:
    - type: "object"
      required:
      - "id"
      - "name"
      - "organizationId"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "Id of the AttributeGroup"
        name:
          type: "string"
          description: "Name of the AttributeGroup"
        organizationId:
          type: "string"
          format: "UUID"
          description: "Id of the organization that this attribute group belongs to."
    - $ref: "#/definitions/AuditFields"
  AttributeGroupRequestBody:
    type: "object"
    required:
    - "name"
    - "organizationId"
    properties:
      name:
        type: "string"
        description: "Name of the entity"
      organizationId:
        type: "string"
        format: "UUID"
        description: "Id of the organization that this attribute group belongs to."
    description: "Request body containing the fields for an Attribute Group."
    example:
      organizationId: "organizationId"
      name: "name"
  Organization:
    allOf:
    - type: "object"
      required:
      - "id"
      - "name"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "Id of the organization"
        name:
          type: "string"
          description: "Name of the organization"
    - $ref: "#/definitions/AuditFields"
  OrganizationSkillsProviderRequestBody:
    type: "object"
    required:
    - "skillProviderId"
    properties:
      skillProviderId:
        type: "string"
        format: "UUID"
        description: "Id of the organization skills provider."
  OrganizationSkillsProvider:
    allOf:
    - type: "object"
      required:
      - "skillProviderId"
      - "organizationId"
      properties:
        skillProviderId:
          type: "string"
          format: "UUID"
          description: "Id of the organization skills provider."
        organizationId:
          type: "string"
          format: "UUID"
          description: "The organization id."
    - $ref: "#/definitions/AuditFields"
  NameRequestBody:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the entity"
    description: "Simple request body containing the name of the entity."
    example:
      name: "name"
  Attribute:
    allOf:
    - type: "object"
      required:
      - "attributeGroupId"
      - "id"
      - "name"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The attribute id"
        attributeGroupId:
          type: "string"
          format: "UUID"
          description: "The referenced attribute group id"
        name:
          type: "string"
          description: "The name of the attribute"
    - $ref: "#/definitions/AuditFields"
  AttributeRequestBody:
    allOf:
    - $ref: "#/definitions/AttributeUpdateRequestBody"
    - {}
  AttributeUpdateRequestBody:
    type: "object"
    properties:
      attributeGroupId:
        type: "string"
        format: "UUID"
        description: "The id of provider for this attribute."
      name:
        type: "string"
        description: "Name of attribute"
    example:
      name: "name"
      attributeGroupId: "attributeGroupId"
  SearchUserRequestBody:
    type: "object"
    required:
    - organizationId
    properties:
      achievements:
        type: "array"
        items:
          type: "string"
        description: "The achievement name to filter users with. Specify multiple times to provide multiple values"
      attributes:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              format: "UUID"
            value:
              type: "string"
        description: "Filter by user attributes"
      isAvailable:
        type: "string"
        enum: ["true", "false"]
        description: "`true` corresponds to users that are available. `false` corresponds to users that are not available. `isAvailable` here is an attribute of the user"
      locations:
        type: "array"
        items:
          type: "string"
        description: "The location name to filter users with. Specify multiple times to provide multiple values. `location` here is an attribute of the user"
      organizationId:
        description: "The organization id"
        type: "string"
        format: "UUID"
  Unauthorized:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Unable to authenticate the user."
        description: "The unauthorized error message."
    description: "The unauthorized error entity."
  NotFound:
    type: "object"
    properties:
      message:
        type: "string"
        example: "A resource with the name could not be found."
        description: "The not found error message."
    description: "The not found error entity."
  ServerError:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Something went wrong while processing your request. We're sorry\
          \ for the trouble. We've been notified of the error and will correct it\
          \ as soon as possible. Please try your request again in a moment."
        description: "The server error message."
    description: "The server error entity."
  BadRequest:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Invalid input."
        description: "The bad request error message."
    description: "The bad request error entity."
  Forbidden:
    type: "object"
    properties:
      message:
        type: "string"
        example: "You are not allowed to access the request."
        description: "The forbidden error message."
    description: "The permission error entity."
  Conflict:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        example: "Creating a resource with a name already exists."
        description: "The conflict error message."
    description: "The conflict error entity."
