{
	"info": {
		"_postman_id": "98169e02-9e6d-4752-93d6-7408ce504a23",
		"name": "Ubahn-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "search users",
					"item": [
						{
							"name": "search users with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[response.length - 1].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/users?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search users with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search users with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search users with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head users",
					"item": [
						{
							"name": "head users with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head users with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head users with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head users with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create user",
					"item": [
						{
							"name": "create user by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.handle).to.eq(iterationData.get('handle'))",
											"        pm.expect(response.firstName).to.eq(iterationData.get('firstName'))",
											"        pm.expect(response.lastName).to.eq(iterationData.get('lastName'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"handle\":\"{{handle}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.handle).to.eq(iterationData.get('handle'))",
											"        pm.expect(response.firstName).to.eq(iterationData.get('firstName'))",
											"        pm.expect(response.lastName).to.eq(iterationData.get('lastName'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"handle\":\"{{handle}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"handle\":\"POSTMANE2E-handle02\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get user",
					"item": [
						{
							"name": "get user with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get user with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{USER_ID_1}}?enrich=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{USER_ID_1}}"
									],
									"query": [
										{
											"key": "enrich",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user",
					"item": [
						{
							"name": "head user with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{USER_ID_1}}?enrich=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{USER_ID_1}}"
									],
									"query": [
										{
											"key": "enrich",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update user",
					"item": [
						{
							"name": "patch user by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').handle) {",
											"            pm.expect(response.handle).to.eq(iterationData.get('expected').handle)",
											"        }",
											"        if (iterationData.get('expected').firstName) {",
											"            pm.expect(response.firstName).to.eq(iterationData.get('expected').firstName)",
											"        }",
											"        if (iterationData.get('expected').lastName) {",
											"            pm.expect(response.lastName).to.eq(iterationData.get('expected').lastName)",
											"        }        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').handle) {",
											"            pm.expect(response.handle).to.eq(iterationData.get('expected').handle)",
											"        }",
											"        if (iterationData.get('expected').firstName) {",
											"            pm.expect(response.firstName).to.eq(iterationData.get('expected').firstName)",
											"        }",
											"        if (iterationData.get('expected').lastName) {",
											"            pm.expect(response.lastName).to.eq(iterationData.get('expected').lastName)",
											"        }        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"handle\": \"POSTMANE2E-validHanldexyz\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete user",
					"item": [
						{
							"name": "delete user by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "skills provider",
			"item": [
				{
					"name": "search skill providers",
					"item": [
						{
							"name": "search skill providers with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search skill providers with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search skill providers with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search skill providers with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head skill providers",
					"item": [
						{
							"name": "head skill providers with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill providers with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill providers with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill providers with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create skill provider",
					"item": [
						{
							"name": "create skill provider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/skillsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create skill provider by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/skillsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create skill provider with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skillsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create skill provider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-skill-validname\"\n}"
								},
								"url": {
									"raw": "{{URL}}/skillsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get skill provider",
					"item": [
						{
							"name": "get skill provider with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skill provider with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skill provider with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skill provider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provide_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provide_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head skill provider",
					"item": [
						{
							"name": "head skill provider with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill provider with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill provider with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill provider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provide_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provide_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update skill provider",
					"item": [
						{
							"name": "patch skill provider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch skill provider by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch skill provider with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch skill provider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete skill provider",
					"item": [
						{
							"name": "delete skill provider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete skill provider with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skillsProviders/{{provider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skillsProviders",
										"{{provider_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "skills",
			"item": [
				{
					"name": "search skills",
					"item": [
						{
							"name": "search skills with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search skills with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search skills with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search skills with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head skills",
					"item": [
						{
							"name": "head skills with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head skills with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head skills with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head skills with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create skill",
					"item": [
						{
							"name": "create skill by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.uri).to.eq(iterationData.get('uri'))",
											"        pm.expect(response.externalId).to.eq(iterationData.get('externalId'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"skillProviderId\":\"{{skillProviderId}}\",\n\t\"name\":\"{{name}}\",\n\t\"uri\":\"{{uri}}\",\n\t\"externalId\":\"{{externalId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "create skill by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.uri).to.eq(iterationData.get('uri'))",
											"        pm.expect(response.externalId).to.eq(iterationData.get('externalId'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"skillProviderId\":\"{{skillProviderId}}\",\n\t\"name\":\"{{name}}\",\n\t\"uri\":\"{{uri}}\",\n\t\"externalId\":\"{{externalId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "create skill with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "create skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"skillProviderId\": \"{{SKILL_PROVIDER_ID_1}}\",\n    \"name\": \"POSTMANE2E-Skill01-by-admin-valid\",\n    \"uri\": \"POSTMANE2E-skill-uri01-by-admin\",\n    \"externalId\": \"POSTMANE2E-externalId01-by-admin\"\n}"
								},
								"url": {
									"raw": "{{URL}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get skill",
					"item": [
						{
							"name": "get skill with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skill with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skill with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head skill",
					"item": [
						{
							"name": "head skill with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update skill",
					"item": [
						{
							"name": "patch skill by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').externalId) {",
											"            pm.expect(response.externalId).to.eq(iterationData.get('expected').externalId)",
											"        }",
											"        if (iterationData.get('expected').skillProviderId) {",
											"            const skillProviderId = iterationData.get('expected').skillProviderId",
											"            if (skillProviderId.startsWith('{')) {",
											"                pm.expect(response.skillProviderId).to.eq(pm.environment.get(skillProviderId.substr(2, skillProviderId.length - 4)))",
											"            } else {",
											"                pm.expect(response.skillProviderId).to.eq(skillProviderId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch skill by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').externalId) {",
											"            pm.expect(response.externalId).to.eq(iterationData.get('expected').externalId)",
											"        }",
											"        if (iterationData.get('expected').skillProviderId) {",
											"            const skillProviderId = iterationData.get('expected').skillProviderId",
											"            if (skillProviderId.startsWith('{')) {",
											"                pm.expect(response.skillProviderId).to.eq(pm.environment.get(skillProviderId.substr(2, skillProviderId.length - 4)))",
											"            } else {",
											"                pm.expect(response.skillProviderId).to.eq(skillProviderId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch skill with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete skill",
					"item": [
						{
							"name": "delete skill by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete skill with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skills/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skills",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user skills",
			"item": [
				{
					"name": "search user skills",
					"item": [
						{
							"name": "search user skills with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user skills with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user skills with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user skills with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user skills",
					"item": [
						{
							"name": "head user skills with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user skills with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user skills with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user skills with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create user skill",
					"item": [
						{
							"name": "create user skill by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        if (iterationData.get('expected').metricValue) {",
											"            pm.expect(response.metricValue).to.eq(iterationData.get('expected').metricValue)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user skill by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        if (iterationData.get('expected').metricValue) {",
											"            pm.expect(response.metricValue).to.eq(iterationData.get('expected').metricValue)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user skill with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"skillId\":\"{{SKILL_ID_1}}\",\n\t\"metricValue\":\"3L\",\n\t\"certifierId\":\"certifier_id\",\n\t\"certifiedDate\":\"2020-05-04T07:36:28.036Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get user skill",
					"item": [
						{
							"name": "get user skill with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the skill id should be in the response body",
											"        pm.expect(response.skillId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user skill with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.skillId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user skill with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user skill",
					"item": [
						{
							"name": "head user skill with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user skill with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user skill with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update user skill",
					"item": [
						{
							"name": "patch user skill by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        if (iterationData.get('expected').metricValue) {",
											"            pm.expect(response.metricValue).to.eq(iterationData.get('expected').metricValue)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"        // the skill id should be in the response body",
											"        pm.expect(response.skillId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user skill by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        if (iterationData.get('expected').metricValue) {",
											"            pm.expect(response.metricValue).to.eq(iterationData.get('expected').metricValue)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"        // the skill id should be in the response body",
											"        pm.expect(response.skillId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user skill with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user skill with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete user skill",
					"item": [
						{
							"name": "delete user skill by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{USER_ID_BY_TESTER}}/skills/{{SKILL_ID_BY_TESTER}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{USER_ID_BY_TESTER}}",
										"skills",
										"{{SKILL_ID_BY_TESTER}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user skill with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/skills/{{skill_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"skills",
										"{{skill_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "roles",
			"item": [
				{
					"name": "search roles",
					"item": [
						{
							"name": "search roles with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head roles",
					"item": [
						{
							"name": "head roles with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head roles with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head roles with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head roles with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create role",
					"item": [
						{
							"name": "create role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        pm.environment.set('ROLE_ID_FOR_DELETE', response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-role-validname\"\n}"
								},
								"url": {
									"raw": "{{URL}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get role",
					"item": [
						{
							"name": "get role with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head role",
					"item": [
						{
							"name": "head role with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head role with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head role with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update role",
					"item": [
						{
							"name": "patch role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch role by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch role with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete role",
					"item": [
						{
							"name": "delete role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/roles/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"roles",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user roles",
			"item": [
				{
					"name": "search user roles",
					"item": [
						{
							"name": "search user roles with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user roles with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user roles with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user roles with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user roles",
					"item": [
						{
							"name": "head user roles with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user roles with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user roles with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user roles with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create user role",
					"item": [
						{
							"name": "create user role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user role by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user role with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"roleId\":\"{{ROLE_ID_1}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get user role",
					"item": [
						{
							"name": "get user role with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the role id should be in the response body",
											"        pm.expect(response.roleId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user role with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.roleId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user role with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user role",
					"item": [
						{
							"name": "head user role with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user role with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user role with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete user role",
					"item": [
						{
							"name": "delete user role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{USER_ID_BY_TESTER}}/roles/{{ROLE_ID_1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{USER_ID_BY_TESTER}}",
										"roles",
										"{{ROLE_ID_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user role with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/roles/{{role_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "organizations",
			"item": [
				{
					"name": "search organizations",
					"item": [
						{
							"name": "search organizations with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search organizations with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search organizations with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search organizations with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head organizations",
					"item": [
						{
							"name": "head organizations with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head organizations with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head organizations with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head organizations with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create organization",
					"item": [
						{
							"name": "create organization by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        pm.environment.set('ORGANIZATION_ID_FOR_DELETE', response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/organizations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create organization by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/organizations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create organization with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/organizations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create organization with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-organization-validname\"\n}"
								},
								"url": {
									"raw": "{{URL}}/organizations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get organization",
					"item": [
						{
							"name": "get organization with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get organization with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get organization with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get organization with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head organization",
					"item": [
						{
							"name": "head organization with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update organization",
					"item": [
						{
							"name": "patch organization by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch organization by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch organization with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch organization with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete organization",
					"item": [
						{
							"name": "delete organization by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{ORGANIZATION_ID_FOR_DELETE}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{ORGANIZATION_ID_FOR_DELETE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete organization with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "achievements providers",
			"item": [
				{
					"name": "search achievementsProviders",
					"item": [
						{
							"name": "search achievementsProviders with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search achievementsProviders with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search achievementsProviders with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search achievementsProviders with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head achievementsProviders",
					"item": [
						{
							"name": "head achievementsProviders with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head achievementsProviders with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head achievementsProviders with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head achievementsProviders with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create achievementsProvider",
					"item": [
						{
							"name": "create achievementsProvider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        pm.environment.set('ACHIEVEMENTS_PROVIDER_ID_FOR_DELETE', response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/achievementsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create achievementsProvider by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/achievementsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create achievementsProvider with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/achievementsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create achievementsProvider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-achievementsProvider-validname\"\n}"
								},
								"url": {
									"raw": "{{URL}}/achievementsProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get achievementsProvider",
					"item": [
						{
							"name": "get achievementsProvider with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get achievementsProvider with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get achievementsProvider with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get achievementsProvider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head achievementsProvider",
					"item": [
						{
							"name": "head achievementsProvider with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head achievementsProvider with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head achievementsProvider with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head achievementsProvider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update achievementsProvider",
					"item": [
						{
							"name": "patch achievementsProvider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch achievementsProvider by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch achievementsProvider with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch achievementsProvider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete achievementsProvider",
					"item": [
						{
							"name": "delete achievementsProvider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{ACHIEVEMENTS_PROVIDER_ID_FOR_DELETE}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{ACHIEVEMENTS_PROVIDER_ID_FOR_DELETE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete achievementsProvider with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/achievementsProviders/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"achievementsProviders",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "attribute groups",
			"item": [
				{
					"name": "search attributeGroups",
					"item": [
						{
							"name": "search attributeGroups with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search attributeGroups with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search attributeGroups with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search attributeGroups with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head attributeGroups",
					"item": [
						{
							"name": "head attributeGroups with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributeGroups with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributeGroups with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributeGroups with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create attributeGroup",
					"item": [
						{
							"name": "create attributeGroup by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        pm.environment.set('ATTRIBUTE_GROUP_ID_FOR_DELETE', response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\",\n    \"organizationId\":\"{{organization_id}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/attributeGroups",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attributeGroup by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\",\n    \"organizationId\":\"{{organization_id}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/attributeGroups",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attributeGroup with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributeGroups",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attributeGroup with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-attributeGroup-validname\"\n}"
								},
								"url": {
									"raw": "{{URL}}/attributeGroups",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get attributeGroup",
					"item": [
						{
							"name": "get attributeGroup with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attributeGroup with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attributeGroup with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attributeGroup with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head attributeGroup",
					"item": [
						{
							"name": "head attributeGroup with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributeGroup with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributeGroup with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributeGroup with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update attributeGroup",
					"item": [
						{
							"name": "patch attributeGroup by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').organizationId) {",
											"            const organizationId = iterationData.get('expected').organizationId",
											"            if (organizationId.startsWith('{')) {",
											"                pm.expect(response.organizationId).to.eq(pm.environment.get(organizationId.substr(2, organizationId.length - 4)))",
											"            } else {",
											"                pm.expect(response.organizationId).to.eq(organizationId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch attributeGroup by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').organizationId) {",
											"            const organizationId = iterationData.get('expected').organizationId",
											"            if (organizationId.startsWith('{')) {",
											"                pm.expect(response.organizationId).to.eq(pm.environment.get(organizationId.substr(2, organizationId.length - 4)))",
											"            } else {",
											"                pm.expect(response.organizationId).to.eq(organizationId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch attributeGroup with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch attributeGroup with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete attributeGroup",
					"item": [
						{
							"name": "delete attributeGroup by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{ATTRIBUTE_GROUP_ID_FOR_DELETE}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{ATTRIBUTE_GROUP_ID_FOR_DELETE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete attributeGroup with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributeGroups/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributeGroups",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "attributes",
			"item": [
				{
					"name": "search attributes",
					"item": [
						{
							"name": "search attributes with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search attributes with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search attributes with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search attributes with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head attributes",
					"item": [
						{
							"name": "head attributes with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributes with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributes with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head attributes with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create attribute",
					"item": [
						{
							"name": "create attribute by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        pm.environment.set('ATTRIBUTE_ID_FOR_DELETE', response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\",\n\t\"attributeGroupId\":\"{{attribute_group_id}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attribute by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"{{name}}\",\n\t\"attributeGroupId\":\"{{attribute_group_id}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attribute with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-attribute-validname\"\n}"
								},
								"url": {
									"raw": "{{URL}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get attribute",
					"item": [
						{
							"name": "get attribute with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attribute with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attribute with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head attribute",
					"item": [
						{
							"name": "head attribute with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head attribute with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head attribute with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update attribute",
					"item": [
						{
							"name": "patch attribute by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').attributeGroupId) {",
											"            const attributeGroupId = iterationData.get('expected').attributeGroupId",
											"            if (attributeGroupId.startsWith('{')) {",
											"                pm.expect(response.attributeGroupId).to.eq(pm.environment.get(attributeGroupId.substr(2, attributeGroupId.length - 4)))",
											"            } else {",
											"                pm.expect(response.attributeGroupId).to.eq(attributeGroupId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch attribute by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').attributeGroupId) {",
											"            const attributeGroupId = iterationData.get('expected').attributeGroupId",
											"            if (attributeGroupId.startsWith('{')) {",
											"                pm.expect(response.attributeGroupId).to.eq(pm.environment.get(attributeGroupId.substr(2, attributeGroupId.length - 4)))",
											"            } else {",
											"                pm.expect(response.attributeGroupId).to.eq(attributeGroupId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch attribute with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete attribute",
					"item": [
						{
							"name": "delete attribute by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{ATTRIBUTE_ID_FOR_DELETE}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{ATTRIBUTE_ID_FOR_DELETE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete attribute with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/attributes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"attributes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user achievements",
			"item": [
				{
					"name": "search user achievements",
					"item": [
						{
							"name": "search user achievements with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user achievements with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user achievements with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user achievements with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user achievements",
					"item": [
						{
							"name": "head user achievements with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user achievements with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user achievements with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user achievements with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create user achievement",
					"item": [
						{
							"name": "create user achievement by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"",
											"        if (iterationData.get('expected').achievementsProviderId) {",
											"            const achievementsProviderId = iterationData.get('expected').achievementsProviderId",
											"            if (achievementsProviderId.startsWith('{')) {",
											"                pm.expect(response.achievementsProviderId).to.eq(pm.environment.get(achievementsProviderId.substr(2, achievementsProviderId.length - 4)))",
											"            } else {",
											"                pm.expect(response.achievementsProviderId).to.eq(achievementsProviderId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user achievement by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"",
											"        if (iterationData.get('expected').achievementsProviderId) {",
											"            const achievementsProviderId = iterationData.get('expected').achievementsProviderId",
											"            if (achievementsProviderId.startsWith('{')) {",
											"                pm.expect(response.achievementsProviderId).to.eq(pm.environment.get(achievementsProviderId.substr(2, achievementsProviderId.length - 4)))",
											"            } else {",
											"                pm.expect(response.achievementsProviderId).to.eq(achievementsProviderId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user achievement with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user achievement with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"achievementsProviderId\": \"{{ACHIEVEMENTS_PROVIDER_ID_BY_ADMIN}}\",\n      \"name\": \"POSTMANE2E-Topcoder-by-ADMIN-009\",\n      \"uri\": \"http://some.uri\",\n      \"certifierId\": \"certifier id 001\",\n      \"certifiedDate\": \"2020-05-04T07:36:28.036Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get user achievement",
					"item": [
						{
							"name": "get user achievement with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the achievements provider id should be in the response body",
											"        pm.expect(response.achievementsProviderId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user achievement with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the achievements provider id should be in the response body",
											"        pm.expect(response.achievementsProviderId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user achievement with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user achievement with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user achievement",
					"item": [
						{
							"name": "head user achievement with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user achievement with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user achievement with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user achievement with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update user achievement",
					"item": [
						{
							"name": "patch user achievement by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.not.eq(null)",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"",
											"        if (iterationData.get('expected').achievementsProviderId) {",
											"            const achievementsProviderId = iterationData.get('expected').achievementsProviderId",
											"            if (achievementsProviderId.startsWith('{')) {",
											"                pm.expect(response.achievementsProviderId).to.eq(pm.environment.get(achievementsProviderId.substr(2, achievementsProviderId.length - 4)))",
											"            } else {",
											"                pm.expect(response.achievementsProviderId).to.eq(achievementsProviderId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user achievement by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.not.eq(null)",
											"        if (iterationData.get('expected').name) {",
											"            pm.expect(response.name).to.eq(iterationData.get('expected').name)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').certifierId) {",
											"            pm.expect(response.certifierId).to.eq(iterationData.get('expected').certifierId)",
											"        }",
											"        if (iterationData.get('expected').certifiedDate) {",
											"            pm.expect(response.certifiedDate).to.eq(iterationData.get('expected').certifiedDate)",
											"        }",
											"",
											"        if (iterationData.get('expected').achievementsProviderId) {",
											"            const achievementsProviderId = iterationData.get('expected').achievementsProviderId",
											"            if (achievementsProviderId.startsWith('{')) {",
											"                pm.expect(response.achievementsProviderId).to.eq(pm.environment.get(achievementsProviderId.substr(2, achievementsProviderId.length - 4)))",
											"            } else {",
											"                pm.expect(response.achievementsProviderId).to.eq(achievementsProviderId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user achievement with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user achievement with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete user achievement",
					"item": [
						{
							"name": "delete user achievement by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user achievement with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/achievements/{{achievement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"achievements",
										"{{achievement_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "organization skill providers",
			"item": [
				{
					"name": "search organization skillProviders",
					"item": [
						{
							"name": "search organization skillProviders with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search organization skillProviders with various parameters by organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search organization skillProviders with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search organization skillProviders with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head organization skillProviders",
					"item": [
						{
							"name": "head organization skillProviders with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization skillProviders with various parameters by organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization skillProviders with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization skillProviders with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create organization skillProvider",
					"item": [
						{
							"name": "create organization skillProvider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create organization skillProvider by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create organization skillProvider with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									]
								}
							},
							"response": []
						},
						{
							"name": "create organization skillProvider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"skillProviderId\":\"{{PROVIDER_ID_BY_ADMIN}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get organization skillProvider",
					"item": [
						{
							"name": "get organization skillProvider with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.id).to.not.eq(null)",
											"        // the skillProvider id should be in the response body",
											"        pm.expect(response.skillProviderId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the organization id should be in the response body",
											"        pm.expect(response.organizationId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get organization skillProvider with various parameters by organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the id should be in the response body",
											"        pm.expect(response.id).to.not.eq(null)",
											"        // the skillProvider id should be in the response body",
											"        pm.expect(response.skillProviderId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the organization id should be in the response body",
											"        pm.expect(response.organizationId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get organization skillProvider with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get organization skillProvider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head organization skillProvider",
					"item": [
						{
							"name": "head organization skillProvider with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization skillProvider with various parameters by organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization skillProvider with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head organization skillProvider with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete organization skillProvider",
					"item": [
						{
							"name": "delete organization skillProvider by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete organization skillProvider with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/organizations/{{organization_id}}/skillProviders/{{skillProvider_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"organizations",
										"{{organization_id}}",
										"skillProviders",
										"{{skillProvider_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "external profiles",
			"item": [
				{
					"name": "search user externalProfiles",
					"item": [
						{
							"name": "search user externalProfiles with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user externalProfiles with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user externalProfiles with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user externalProfiles with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user externalProfiles",
					"item": [
						{
							"name": "head user externalProfiles with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user externalProfiles with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user externalProfiles with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user externalProfiles with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create user externalProfile",
					"item": [
						{
							"name": "create user externalProfile by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        if (iterationData.get('expected').externalId) {",
											"            pm.expect(response.externalId).to.eq(iterationData.get('expected').externalId)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').isInactive) {",
											"            pm.expect(response.isInactive).to.eq(iterationData.get('expected').isInactive)",
											"        }",
											"",
											"        if (iterationData.get('expected').organizationId) {",
											"            const organizationId = iterationData.get('expected').organizationId",
											"            if (organizationId.startsWith('{')) {",
											"                pm.expect(response.organizationId).to.eq(pm.environment.get(organizationId.substr(2, organizationId.length - 4)))",
											"            } else {",
											"                pm.expect(response.organizationId).to.eq(organizationId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user externalProfile by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        if (iterationData.get('expected').externalId) {",
											"            pm.expect(response.externalId).to.eq(iterationData.get('expected').externalId)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').isInactive) {",
											"            pm.expect(response.isInactive).to.eq(iterationData.get('expected').isInactive)",
											"        }",
											"",
											"        if (iterationData.get('expected').organizationId) {",
											"            const organizationId = iterationData.get('expected').organizationId",
											"            if (organizationId.startsWith('{')) {",
											"                pm.expect(response.organizationId).to.eq(pm.environment.get(organizationId.substr(2, organizationId.length - 4)))",
											"            } else {",
											"                pm.expect(response.organizationId).to.eq(organizationId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user externalProfile with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user externalProfile with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"organizationId\": \"{{ORGANIZATION_ID_BY_ADMIN}}\",\n      \"externalId\": \"POSTMANE2E-Topcoder-by-ADMIN-009\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get user externalProfile",
					"item": [
						{
							"name": "get user externalProfile with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the organizationId should be in the response body",
											"        pm.expect(response.organizationId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user externalProfile with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the organizationId should be in the response body",
											"        pm.expect(response.organizationId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user externalProfile with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user externalProfile with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user externalProfile",
					"item": [
						{
							"name": "head user externalProfile with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user externalProfile with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user externalProfile with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user externalProfile with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update user externalProfile",
					"item": [
						{
							"name": "patch user externalProfile by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.not.eq(null)",
											"        if (iterationData.get('expected').externalId) {",
											"            pm.expect(response.externalId).to.eq(iterationData.get('expected').externalId)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').isInactive) {",
											"            pm.expect(response.isInactive).to.eq(iterationData.get('expected').isInactive)",
											"        }",
											"",
											"        if (iterationData.get('expected').organizationId) {",
											"            const organizationId = iterationData.get('expected').organizationId",
											"            if (organizationId.startsWith('{')) {",
											"                pm.expect(response.organizationId).to.eq(pm.environment.get(organizationId.substr(2, organizationId.length - 4)))",
											"            } else {",
											"                pm.expect(response.organizationId).to.eq(organizationId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user externalProfile by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.not.eq(null)",
											"        if (iterationData.get('expected').externalId) {",
											"            pm.expect(response.externalId).to.eq(iterationData.get('expected').externalId)",
											"        }",
											"        if (iterationData.get('expected').uri) {",
											"            pm.expect(response.uri).to.eq(iterationData.get('expected').uri)",
											"        }",
											"        if (iterationData.get('expected').isInactive) {",
											"            pm.expect(response.isInactive).to.eq(iterationData.get('expected').isInactive)",
											"        }",
											"",
											"        if (iterationData.get('expected').organizationId) {",
											"            const organizationId = iterationData.get('expected').organizationId",
											"            if (organizationId.startsWith('{')) {",
											"                pm.expect(response.organizationId).to.eq(pm.environment.get(organizationId.substr(2, organizationId.length - 4)))",
											"            } else {",
											"                pm.expect(response.organizationId).to.eq(organizationId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user externalProfile with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user externalProfile with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete user externalProfile",
					"item": [
						{
							"name": "delete user externalProfile by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user externalProfile with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/externalProfiles/{{organization_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"externalProfiles",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user attributes",
			"item": [
				{
					"name": "search user attributes",
					"item": [
						{
							"name": "search user attributes with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user attributes with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user attributes with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search user attributes with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user attributes",
					"item": [
						{
							"name": "head user attributes with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user attributes with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user attributes with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "head user attributes with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create user attribute",
					"item": [
						{
							"name": "create user attribute by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        if (iterationData.get('expected').value) {",
											"            pm.expect(response.value).to.eq(iterationData.get('expected').value)",
											"        }",
											"",
											"        if (iterationData.get('expected').attributeId) {",
											"            const attributeId = iterationData.get('expected').attributeId",
											"            if (attributeId.startsWith('{')) {",
											"                pm.expect(response.attributeId).to.eq(pm.environment.get(attributeId.substr(2, attributeId.length - 4)))",
											"            } else {",
											"                pm.expect(response.attributeId).to.eq(attributeId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user attribute by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.eq(null)",
											"        if (iterationData.get('expected').value) {",
											"            pm.expect(response.value).to.eq(iterationData.get('expected').value)",
											"        }",
											"",
											"        if (iterationData.get('expected').attributeId) {",
											"            const attributeId = iterationData.get('expected').attributeId",
											"            if (attributeId.startsWith('{')) {",
											"                pm.expect(response.attributeId).to.eq(pm.environment.get(attributeId.substr(2, attributeId.length - 4)))",
											"            } else {",
											"                pm.expect(response.attributeId).to.eq(attributeId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user attribute with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"attributeId\": \"{{ATTRIBUTE_ID_BY_ADMIN}}\",\n      \"value\": \"POSTMANE2E-Attribute-by-ADMIN-009\"\n}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get user attribute",
					"item": [
						{
							"name": "get user attribute with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the attributeId should be in the response body",
											"        pm.expect(response.attributeId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user attribute with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        // the attributeId should be in the response body",
											"        pm.expect(response.attributeId).to.eq(pm.request.url.path[pm.request.url.path.length - 1])",
											"        // the user id should be in the response body",
											"        pm.expect(response.userId).to.eq(pm.request.url.path[pm.request.url.path.length - 3])",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user attribute with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "head user attribute",
					"item": [
						{
							"name": "head user attribute with various parameters by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user attribute with various parameters by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user attribute with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "head user attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update user attribute",
					"item": [
						{
							"name": "patch user attribute by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.not.eq(null)",
											"        if (iterationData.get('expected').value) {",
											"            pm.expect(response.value).to.eq(iterationData.get('expected').value)",
											"        }",
											"",
											"        if (iterationData.get('expected').attributeId) {",
											"            const attributeId = iterationData.get('expected').attributeId",
											"            if (attributeId.startsWith('{')) {",
											"                pm.expect(response.attributeId).to.eq(pm.environment.get(attributeId.substr(2, attributeId.length - 4)))",
											"            } else {",
											"                pm.expect(response.attributeId).to.eq(attributeId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user attribute by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.createdBy).to.not.eq(null)",
											"        pm.expect(response.id).to.not.eq(null)",
											"        pm.expect(response.updatedBy).to.not.eq(null)",
											"        if (iterationData.get('expected').value) {",
											"            pm.expect(response.value).to.eq(iterationData.get('expected').value)",
											"        }",
											"",
											"        if (iterationData.get('expected').attributeId) {",
											"            const attributeId = iterationData.get('expected').attributeId",
											"            if (attributeId.startsWith('{')) {",
											"                pm.expect(response.attributeId).to.eq(pm.environment.get(attributeId.substr(2, attributeId.length - 4)))",
											"            } else {",
											"                pm.expect(response.attributeId).to.eq(attributeId)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user attribute with invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch user attribute with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete user attribute",
					"item": [
						{
							"name": "delete user attribute by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user attribute with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/users/{{user_id}}/attributes/{{attribute_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"attributes",
										"{{attribute_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "skill search",
			"item": [
				{
					"name": "skill search users",
					"item": [
						{
							"name": "skill search users with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skill-search/users?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"users"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search users with invalid request data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skill-search/users?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"users"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search users with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/skill-search/users?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"users"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "skill search user attributes",
					"item": [
						{
							"name": "skill search user attributes with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAttributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAttributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search user attributes with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAttributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAttributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "skill head user attributes",
					"item": [
						{
							"name": "skill search head user attributes with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAttributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAttributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search head user attributes with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAttributes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAttributes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "skill search user achievements",
					"item": [
						{
							"name": "skill search user achievements with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAttributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAttributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search user achievements with invalid request data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAchievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAchievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search user achievements with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAchievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAchievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "skill head user achievements",
					"item": [
						{
							"name": "skill head user achievements with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAttributes?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAttributes"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill head user achievements with invalid request data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAchievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAchievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill head user achievements with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/userAchievements?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"userAchievements"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "skill search user skills",
					"item": [
						{
							"name": "skill search user skills with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search user skills with invalid request data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill search user skills with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "skill head user skills",
					"item": [
						{
							"name": "skill head user skills with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill head user skills with invalid request data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "skill head user skills with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/skill-search/skills?{{input}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"skill-search",
										"skills"
									],
									"query": [
										{
											"key": "{{input}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "health",
			"item": [
				{
					"name": "health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/ubahnapi/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"ubahnapi",
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}